---
title: "drone-based-model"
output: html_document
date: "2023-12-25"
---

## Load packages

```{r}
#| warning=FALSE
library(glmnet)
library(raster)
library(tidyverse)
library(glue)
library(DirichletReg)
library(ggtern)
library(nnet)
library(jsonlite)
library(tidymodels)
library(sf)
library(stars)
```

## Set the seed and split data

```{r}
set.seed(8675309)
```

## Load the data

```{r}
counts_path <- "clean_data/training.rds"
jack_data <- readRDS(counts_path)

pixel_counts_clean <- jack_data |>
  mutate(notgrass = dead + sand) |>
  mutate(total = grass + dead + sand) |>
  mutate(grass = grass / total, dead = dead / total, sand = sand / total) |>
  as_tibble()
```

Multinomial regression model with lasso regularization.

```{r}
non_predictors <- c(
  "notgrass",
  "grass",
  "sand",
  "dead",
  "quadrat",
  "total",
  "quad_num",
  "quad_quad",
  'quadrant_key'
)

#predictors <- names(pixel_counts_clean)[!names(pixel_counts_clean) %in% non_predictors]
predictors <- c(
  'ortho_1_mean',
  'ortho_2_mean',
  'ortho_3_mean',
  'ortho_4_mean',
  'ortho_5_mean',
  'ndvi_mean',
  'ndvi_sd',
  'ortho_1_sd',
  'ortho_2_sd',
  'ortho_3_sd',
  'ortho_4_sd',
  'ortho_5_sd'
)
```

```{r}
formula <- as.formula(paste0(
  'grass + dead + sand ~ ',
  paste0(predictors, collapse = " + ")
))

rec <- recipe(formula = formula, data = pixel_counts_clean) |>
  step_normalize(all_predictors())

prepped_recipe <- prep(rec)

## Save recipe for when predicting on the orthomosaic
#saveRDS(prepped_recipe, 'clean_data/prepped_recipe.rds')

pixel_counts <- bake(prepped_recipe, new_data = NULL)

training_split <- pixel_counts |>
  initial_split(strata = grass)

counts_train <- training_split |>
  training()

counts_test <- training_split |>
  testing()
```

Formulate response and predictors

```{r}
y <- counts_train |>
  dplyr::select(c(grass, sand, dead)) |>
  as.matrix()

x <- counts_train |>
  dplyr::select(predictors) |>
  as.matrix()
#lambda_grid <- 10 ^ (seq(0, -20, by = -20/100))
```

Fit multinomial regression model with cross validation

```{r}
fit <- cv.glmnet(x, y, family = "multinomial")
```

```{r}
test_y <- counts_test |>
  dplyr::select(c(grass, sand, dead)) |>
  rowwise() |>
  mutate(total = sum(grass, sand, dead)) |>
  mutate(
    dead.obs = dead / total,
    grass.obs = grass / total,
    sand.obs = sand / total
  ) |>
  dplyr::select(-c(total, grass, dead, sand)) |>
  ungroup()


test_x <- counts_test |>
  dplyr::select(predictors) |>
  as.matrix()

prediction <- predict(
  fit,
  newx = test_x,
  s = "lambda.min",
  type = 'response'
) |>
  as_tibble() |>
  rename(dead.pred = dead.1, grass.pred = grass.1, sand.pred = sand.1)
```

Fit Dirichlet regression model

```{r}
#| warning: false
train_data <- counts_train
train_data$Y <- DR_data(train_data[c('grass', 'sand', 'dead')])

dirichlet_fit <- DirichReg(
  Y ~
    ortho_1_mean +
      ortho_2_mean +
      ortho_2_mean +
      ortho_3_mean +
      ortho_4_mean +
      ortho_5_mean +
      ndvi_mean +
      ndvi_sd +
      ortho_1_sd +
      ortho_2_sd +
      ortho_2_sd +
      ortho_3_sd +
      ortho_4_sd +
      ortho_5_sd,
  data = train_data,
  model = "alternative"
)
```

```{r}
#| warning: false
test_data <- counts_train
test_data$Y <- DR_data(test_data[c('grass', 'sand', 'dead')])

prediction_dirichlet <- predict(dirichlet_fit, test_data) |>
  as_tibble() |>
  rename(grass = `V1`, sand = `V2`, dead = `V3`)

truth <- test_data |>
  dplyr::select(grass, dead, sand)

truth_longer <- truth |>
  mutate(id = row_number()) |>
  pivot_longer(cols = c(grass, dead, sand))

# The RMSE is the square root of average squared difference between observed and predicted value
# Each residual is a vector in R^3

num_of_observations <- nrow(test_data) # Number of residuals = Number of observations

rmse <- prediction_dirichlet |>
  mutate(id = row_number()) |>
  pivot_longer(cols = c(grass, dead, sand)) |>
  left_join(truth_longer, by = c('id', 'name')) |>
  mutate(error_squared = (value.x - value.y)^2) |>
  summarize(rmse = sqrt(sum(error_squared) / num_of_observations)) |>
  pull(rmse)


print('RMSE Dirichlet')
print(rmse)
```

Extract test RMSE

```{r}
n <- nrow(test_y)

error <- bind_cols(prediction, test_y) |>
  pivot_longer(
    everything(),
    names_to = c("type", ".value"),
    names_sep = "\\."
  ) |>
  rowwise() |>
  mutate(squard_error = (pred - obs)^2) |>
  ungroup()

#rmse <- sqrt(sum(error$squard_error)/n)
```

## Save fit

```{r}
multinomial_fit <- fit
saveRDS(multinomial_fit, 'clean_data/mutlinomial_fit.rds')
```

## Plot the object fit

```{r}
plot(fit)
```

```{r}
options(scipen = 999)
coefficients <- coef(fit, s = "lambda.min")
glm_fitted_coef <- predict(fit, type = "coefficients", s = 'lambda.min')
coefficients
```

Plot on ternary diagram

```{r}
error |>
  ggplot(aes(obs, pred, color = type)) +
  geom_point() +
  geom_abline() +
  theme_minimal()
```

```{r}
data <- bind_cols(prediction, test_y) |>
  dplyr::select(
    dead.obs,
    grass.obs,
    sand.obs,
    dead.pred,
    grass.pred,
    sand.pred
  ) |>
  mutate(id = 1:nrow(prediction)) |>
  pivot_longer(
    ends_with(c("obs", "pred")),
    names_to = c(".value", "type"),
    names_sep = "\\."
  )
data
```

```{r Ternary with points}
data |>
  ggtern(aes(dead, grass, sand, group = id)) +
  geom_point() +
  theme_rgbw()
```

```{r Ternary with arrows}
data |>
  ggtern(aes(dead, grass, sand, group = id)) +
  geom_path(arrow = arrow(length = unit(0.05, "inches"))) +
  theme_rgbw()
```
